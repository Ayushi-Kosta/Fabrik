{"ast":null,"code":"import _slicedToArray from \"C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport { SimplexNoise } from 'three/examples/jsm/math/SimplexNoise';\nvar CameraShake = /*#__PURE__*/forwardRef(function (_ref, ref) {\n  var _ref$intensity = _ref.intensity,\n      intensity = _ref$intensity === void 0 ? 1 : _ref$intensity,\n      decay = _ref.decay,\n      _ref$decayRate = _ref.decayRate,\n      decayRate = _ref$decayRate === void 0 ? 0.65 : _ref$decayRate,\n      _ref$maxYaw = _ref.maxYaw,\n      maxYaw = _ref$maxYaw === void 0 ? 0.1 : _ref$maxYaw,\n      _ref$maxPitch = _ref.maxPitch,\n      maxPitch = _ref$maxPitch === void 0 ? 0.1 : _ref$maxPitch,\n      _ref$maxRoll = _ref.maxRoll,\n      maxRoll = _ref$maxRoll === void 0 ? 0.1 : _ref$maxRoll,\n      _ref$yawFrequency = _ref.yawFrequency,\n      yawFrequency = _ref$yawFrequency === void 0 ? 1 : _ref$yawFrequency,\n      _ref$pitchFrequency = _ref.pitchFrequency,\n      pitchFrequency = _ref$pitchFrequency === void 0 ? 1 : _ref$pitchFrequency,\n      _ref$rollFrequency = _ref.rollFrequency,\n      rollFrequency = _ref$rollFrequency === void 0 ? 1 : _ref$rollFrequency,\n      additive = _ref.additive;\n\n  var _useThree = useThree(),\n      camera = _useThree.camera;\n\n  var intensityRef = useRef(intensity);\n\n  var _useState = useState(function () {\n    return new SimplexNoise();\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      yawNoise = _useState2[0];\n\n  var _useState3 = useState(function () {\n    return new SimplexNoise();\n  }),\n      _useState4 = _slicedToArray(_useState3, 1),\n      pitchNoise = _useState4[0];\n\n  var _useState5 = useState(function () {\n    return new SimplexNoise();\n  }),\n      _useState6 = _slicedToArray(_useState5, 1),\n      rollNoise = _useState6[0];\n\n  var constrainIntensity = function constrainIntensity() {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  useImperativeHandle(ref, function () {\n    return {\n      getIntensity: function getIntensity() {\n        return intensityRef.current;\n      },\n      setIntensity: function setIntensity(val) {\n        intensityRef.current = val;\n        constrainIntensity();\n      }\n    };\n  }, []);\n  useFrame(function (_ref2, delta) {\n    var clock = _ref2.clock;\n    var shake = Math.pow(intensityRef.current, 2);\n    var yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    var pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    var roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"names":["forwardRef","useRef","useState","useImperativeHandle","useThree","useFrame","SimplexNoise","CameraShake","ref","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","additive","camera","intensityRef","yawNoise","pitchNoise","rollNoise","constrainIntensity","current","getIntensity","setIntensity","val","delta","clock","shake","Math","pow","yaw","noise","elapsedTime","pitch","roll","rotation","x","y","z","set"],"sources":["C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/@react-three/drei/core/CameraShake.js"],"sourcesContent":["import { forwardRef, useRef, useState, useImperativeHandle } from 'react';\nimport { useThree, useFrame } from 'react-three-fiber';\nimport { SimplexNoise } from 'three/examples/jsm/math/SimplexNoise';\n\nconst CameraShake = /*#__PURE__*/forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 1,\n  pitchFrequency = 1,\n  rollFrequency = 1,\n  additive\n}, ref) => {\n  const {\n    camera\n  } = useThree();\n  const intensityRef = useRef(intensity);\n  const [yawNoise] = useState(() => new SimplexNoise());\n  const [pitchNoise] = useState(() => new SimplexNoise());\n  const [rollNoise] = useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  useFrame(({\n    clock\n  }, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n\n    if (additive) {\n      camera.rotation.x += pitch;\n      camera.rotation.y += yaw;\n      camera.rotation.z += roll;\n    } else {\n      camera.rotation.set(pitch, yaw, roll);\n    }\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}