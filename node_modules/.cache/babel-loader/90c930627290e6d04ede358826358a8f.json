{"ast":null,"code":"// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function SimplexNoise(r) {\n  if (r == undefined) r = Math;\n  this.grad3 = [[1, 1, 0], [-1, 1, 0], [1, -1, 0], [-1, -1, 0], [1, 0, 1], [-1, 0, 1], [1, 0, -1], [-1, 0, -1], [0, 1, 1], [0, -1, 1], [0, 1, -1], [0, -1, -1]];\n  this.grad4 = [[0, 1, 1, 1], [0, 1, 1, -1], [0, 1, -1, 1], [0, 1, -1, -1], [0, -1, 1, 1], [0, -1, 1, -1], [0, -1, -1, 1], [0, -1, -1, -1], [1, 0, 1, 1], [1, 0, 1, -1], [1, 0, -1, 1], [1, 0, -1, -1], [-1, 0, 1, 1], [-1, 0, 1, -1], [-1, 0, -1, 1], [-1, 0, -1, -1], [1, 1, 0, 1], [1, 1, 0, -1], [1, -1, 0, 1], [1, -1, 0, -1], [-1, 1, 0, 1], [-1, 1, 0, -1], [-1, -1, 0, 1], [-1, -1, 0, -1], [1, 1, 1, 0], [1, 1, -1, 0], [1, -1, 1, 0], [1, -1, -1, 0], [-1, 1, 1, 0], [-1, 1, -1, 0], [-1, -1, 1, 0], [-1, -1, -1, 0]];\n  this.p = [];\n\n  for (var i = 0; i < 256; i++) {\n    this.p[i] = Math.floor(r.random() * 256);\n  } // To remove the need for index wrapping, double the permutation table length\n\n\n  this.perm = [];\n\n  for (var i = 0; i < 512; i++) {\n    this.perm[i] = this.p[i & 255];\n  } // A lookup table to traverse the simplex around a given point in 4D.\n  // Details can be found where this table is used, in the 4D noise method.\n\n\n  this.simplex = [[0, 1, 2, 3], [0, 1, 3, 2], [0, 0, 0, 0], [0, 2, 3, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 3, 0], [0, 2, 1, 3], [0, 0, 0, 0], [0, 3, 1, 2], [0, 3, 2, 1], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 3, 2, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [1, 2, 0, 3], [0, 0, 0, 0], [1, 3, 0, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 3, 0, 1], [2, 3, 1, 0], [1, 0, 2, 3], [1, 0, 3, 2], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 3, 1], [0, 0, 0, 0], [2, 1, 3, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 1, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 0, 1, 2], [3, 0, 2, 1], [0, 0, 0, 0], [3, 1, 2, 0], [2, 1, 0, 3], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [3, 1, 0, 2], [0, 0, 0, 0], [3, 2, 0, 1], [3, 2, 1, 0]];\n};\n\nSimplexNoise.prototype.dot = function (g, x, y) {\n  return g[0] * x + g[1] * y;\n};\n\nSimplexNoise.prototype.dot3 = function (g, x, y, z) {\n  return g[0] * x + g[1] * y + g[2] * z;\n};\n\nSimplexNoise.prototype.dot4 = function (g, x, y, z, w) {\n  return g[0] * x + g[1] * y + g[2] * z + g[3] * w;\n};\n\nSimplexNoise.prototype.noise = function (xin, yin) {\n  var n0, n1, n2; // Noise contributions from the three corners\n  // Skew the input space to determine which simplex cell we're in\n\n  var F2 = 0.5 * (Math.sqrt(3.0) - 1.0);\n  var s = (xin + yin) * F2; // Hairy factor for 2D\n\n  var i = Math.floor(xin + s);\n  var j = Math.floor(yin + s);\n  var G2 = (3.0 - Math.sqrt(3.0)) / 6.0;\n  var t = (i + j) * G2;\n  var X0 = i - t; // Unskew the cell origin back to (x,y) space\n\n  var Y0 = j - t;\n  var x0 = xin - X0; // The x,y distances from the cell origin\n\n  var y0 = yin - Y0; // For the 2D case, the simplex shape is an equilateral triangle.\n  // Determine which simplex we are in.\n\n  var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n  if (x0 > y0) {\n    i1 = 1;\n    j1 = 0; // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n  } else {\n    i1 = 0;\n    j1 = 1;\n  } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n  // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n  // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n  // c = (3-sqrt(3))/6\n\n\n  var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n  var y1 = y0 - j1 + G2;\n  var x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n  var y2 = y0 - 1.0 + 2.0 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n  var ii = i & 255;\n  var jj = j & 255;\n  var gi0 = this.perm[ii + this.perm[jj]] % 12;\n  var gi1 = this.perm[ii + i1 + this.perm[jj + j1]] % 12;\n  var gi2 = this.perm[ii + 1 + this.perm[jj + 1]] % 12; // Calculate the contribution from the three corners\n\n  var t0 = 0.5 - x0 * x0 - y0 * y0;\n  if (t0 < 0) n0 = 0.0;else {\n    t0 *= t0;\n    n0 = t0 * t0 * this.dot(this.grad3[gi0], x0, y0); // (x,y) of grad3 used for 2D gradient\n  }\n  var t1 = 0.5 - x1 * x1 - y1 * y1;\n  if (t1 < 0) n1 = 0.0;else {\n    t1 *= t1;\n    n1 = t1 * t1 * this.dot(this.grad3[gi1], x1, y1);\n  }\n  var t2 = 0.5 - x2 * x2 - y2 * y2;\n  if (t2 < 0) n2 = 0.0;else {\n    t2 *= t2;\n    n2 = t2 * t2 * this.dot(this.grad3[gi2], x2, y2);\n  } // Add contributions from each corner to get the final noise value.\n  // The result is scaled to return values in the interval [-1,1].\n\n  return 70.0 * (n0 + n1 + n2);\n}; // 3D simplex noise\n\n\nSimplexNoise.prototype.noise3d = function (xin, yin, zin) {\n  var n0, n1, n2, n3; // Noise contributions from the four corners\n  // Skew the input space to determine which simplex cell we're in\n\n  var F3 = 1.0 / 3.0;\n  var s = (xin + yin + zin) * F3; // Very nice and simple skew factor for 3D\n\n  var i = Math.floor(xin + s);\n  var j = Math.floor(yin + s);\n  var k = Math.floor(zin + s);\n  var G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\n  var t = (i + j + k) * G3;\n  var X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\n  var Y0 = j - t;\n  var Z0 = k - t;\n  var x0 = xin - X0; // The x,y,z distances from the cell origin\n\n  var y0 = yin - Y0;\n  var z0 = zin - Z0; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n  // Determine which simplex we are in.\n\n  var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n  var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n  if (x0 >= y0) {\n    if (y0 >= z0) {\n      i1 = 1;\n      j1 = 0;\n      k1 = 0;\n      i2 = 1;\n      j2 = 1;\n      k2 = 0; // X Y Z order\n    } else if (x0 >= z0) {\n      i1 = 1;\n      j1 = 0;\n      k1 = 0;\n      i2 = 1;\n      j2 = 0;\n      k2 = 1; // X Z Y order\n    } else {\n      i1 = 0;\n      j1 = 0;\n      k1 = 1;\n      i2 = 1;\n      j2 = 0;\n      k2 = 1;\n    } // Z X Y order\n\n  } else {\n    // x0<y0\n    if (y0 < z0) {\n      i1 = 0;\n      j1 = 0;\n      k1 = 1;\n      i2 = 0;\n      j2 = 1;\n      k2 = 1; // Z Y X order\n    } else if (x0 < z0) {\n      i1 = 0;\n      j1 = 1;\n      k1 = 0;\n      i2 = 0;\n      j2 = 1;\n      k2 = 1; // Y Z X order\n    } else {\n      i1 = 0;\n      j1 = 1;\n      k1 = 0;\n      i2 = 1;\n      j2 = 1;\n      k2 = 0;\n    } // Y X Z order\n\n  } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n  // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n  // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n  // c = 1/6.\n\n\n  var x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\n  var y1 = y0 - j1 + G3;\n  var z1 = z0 - k1 + G3;\n  var x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\n  var y2 = y0 - j2 + 2.0 * G3;\n  var z2 = z0 - k2 + 2.0 * G3;\n  var x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\n  var y3 = y0 - 1.0 + 3.0 * G3;\n  var z3 = z0 - 1.0 + 3.0 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n  var ii = i & 255;\n  var jj = j & 255;\n  var kk = k & 255;\n  var gi0 = this.perm[ii + this.perm[jj + this.perm[kk]]] % 12;\n  var gi1 = this.perm[ii + i1 + this.perm[jj + j1 + this.perm[kk + k1]]] % 12;\n  var gi2 = this.perm[ii + i2 + this.perm[jj + j2 + this.perm[kk + k2]]] % 12;\n  var gi3 = this.perm[ii + 1 + this.perm[jj + 1 + this.perm[kk + 1]]] % 12; // Calculate the contribution from the four corners\n\n  var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n  if (t0 < 0) n0 = 0.0;else {\n    t0 *= t0;\n    n0 = t0 * t0 * this.dot3(this.grad3[gi0], x0, y0, z0);\n  }\n  var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n  if (t1 < 0) n1 = 0.0;else {\n    t1 *= t1;\n    n1 = t1 * t1 * this.dot3(this.grad3[gi1], x1, y1, z1);\n  }\n  var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n  if (t2 < 0) n2 = 0.0;else {\n    t2 *= t2;\n    n2 = t2 * t2 * this.dot3(this.grad3[gi2], x2, y2, z2);\n  }\n  var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n  if (t3 < 0) n3 = 0.0;else {\n    t3 *= t3;\n    n3 = t3 * t3 * this.dot3(this.grad3[gi3], x3, y3, z3);\n  } // Add contributions from each corner to get the final noise value.\n  // The result is scaled to stay just inside [-1,1]\n\n  return 32.0 * (n0 + n1 + n2 + n3);\n}; // 4D simplex noise\n\n\nSimplexNoise.prototype.noise4d = function (x, y, z, w) {\n  // For faster and easier lookups\n  var grad4 = this.grad4;\n  var simplex = this.simplex;\n  var perm = this.perm; // The skewing and unskewing factors are hairy again for the 4D case\n\n  var F4 = (Math.sqrt(5.0) - 1.0) / 4.0;\n  var G4 = (5.0 - Math.sqrt(5.0)) / 20.0;\n  var n0, n1, n2, n3, n4; // Noise contributions from the five corners\n  // Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\n  var s = (x + y + z + w) * F4; // Factor for 4D skewing\n\n  var i = Math.floor(x + s);\n  var j = Math.floor(y + s);\n  var k = Math.floor(z + s);\n  var l = Math.floor(w + s);\n  var t = (i + j + k + l) * G4; // Factor for 4D unskewing\n\n  var X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\n  var Y0 = j - t;\n  var Z0 = k - t;\n  var W0 = l - t;\n  var x0 = x - X0; // The x,y,z,w distances from the cell origin\n\n  var y0 = y - Y0;\n  var z0 = z - Z0;\n  var w0 = w - W0; // For the 4D case, the simplex is a 4D shape I won't even try to describe.\n  // To find out which of the 24 possible simplices we're in, we need to\n  // determine the magnitude ordering of x0, y0, z0 and w0.\n  // The method below is a good way of finding the ordering of x,y,z,w and\n  // then find the correct traversal order for the simplex we’re in.\n  // First, six pair-wise comparisons are performed between each possible pair\n  // of the four coordinates, and the results are used to add up binary bits\n  // for an integer index.\n\n  var c1 = x0 > y0 ? 32 : 0;\n  var c2 = x0 > z0 ? 16 : 0;\n  var c3 = y0 > z0 ? 8 : 0;\n  var c4 = x0 > w0 ? 4 : 0;\n  var c5 = y0 > w0 ? 2 : 0;\n  var c6 = z0 > w0 ? 1 : 0;\n  var c = c1 + c2 + c3 + c4 + c5 + c6;\n  var i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\n  var i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\n  var i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n  // simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n  // Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n  // impossible. Only the 24 indices which have non-zero entries make any sense.\n  // We use a thresholding to set the coordinates in turn from the largest magnitude.\n  // The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\n  i1 = simplex[c][0] >= 3 ? 1 : 0;\n  j1 = simplex[c][1] >= 3 ? 1 : 0;\n  k1 = simplex[c][2] >= 3 ? 1 : 0;\n  l1 = simplex[c][3] >= 3 ? 1 : 0; // The number 2 in the \"simplex\" array is at the second largest coordinate.\n\n  i2 = simplex[c][0] >= 2 ? 1 : 0;\n  j2 = simplex[c][1] >= 2 ? 1 : 0;\n  k2 = simplex[c][2] >= 2 ? 1 : 0;\n  l2 = simplex[c][3] >= 2 ? 1 : 0; // The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\n  i3 = simplex[c][0] >= 1 ? 1 : 0;\n  j3 = simplex[c][1] >= 1 ? 1 : 0;\n  k3 = simplex[c][2] >= 1 ? 1 : 0;\n  l3 = simplex[c][3] >= 1 ? 1 : 0; // The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\n  var x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\n  var y1 = y0 - j1 + G4;\n  var z1 = z0 - k1 + G4;\n  var w1 = w0 - l1 + G4;\n  var x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\n  var y2 = y0 - j2 + 2.0 * G4;\n  var z2 = z0 - k2 + 2.0 * G4;\n  var w2 = w0 - l2 + 2.0 * G4;\n  var x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\n  var y3 = y0 - j3 + 3.0 * G4;\n  var z3 = z0 - k3 + 3.0 * G4;\n  var w3 = w0 - l3 + 3.0 * G4;\n  var x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\n  var y4 = y0 - 1.0 + 4.0 * G4;\n  var z4 = z0 - 1.0 + 4.0 * G4;\n  var w4 = w0 - 1.0 + 4.0 * G4; // Work out the hashed gradient indices of the five simplex corners\n\n  var ii = i & 255;\n  var jj = j & 255;\n  var kk = k & 255;\n  var ll = l & 255;\n  var gi0 = perm[ii + perm[jj + perm[kk + perm[ll]]]] % 32;\n  var gi1 = perm[ii + i1 + perm[jj + j1 + perm[kk + k1 + perm[ll + l1]]]] % 32;\n  var gi2 = perm[ii + i2 + perm[jj + j2 + perm[kk + k2 + perm[ll + l2]]]] % 32;\n  var gi3 = perm[ii + i3 + perm[jj + j3 + perm[kk + k3 + perm[ll + l3]]]] % 32;\n  var gi4 = perm[ii + 1 + perm[jj + 1 + perm[kk + 1 + perm[ll + 1]]]] % 32; // Calculate the contribution from the five corners\n\n  var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n  if (t0 < 0) n0 = 0.0;else {\n    t0 *= t0;\n    n0 = t0 * t0 * this.dot4(grad4[gi0], x0, y0, z0, w0);\n  }\n  var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n  if (t1 < 0) n1 = 0.0;else {\n    t1 *= t1;\n    n1 = t1 * t1 * this.dot4(grad4[gi1], x1, y1, z1, w1);\n  }\n  var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n  if (t2 < 0) n2 = 0.0;else {\n    t2 *= t2;\n    n2 = t2 * t2 * this.dot4(grad4[gi2], x2, y2, z2, w2);\n  }\n  var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n  if (t3 < 0) n3 = 0.0;else {\n    t3 *= t3;\n    n3 = t3 * t3 * this.dot4(grad4[gi3], x3, y3, z3, w3);\n  }\n  var t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n  if (t4 < 0) n4 = 0.0;else {\n    t4 *= t4;\n    n4 = t4 * t4 * this.dot4(grad4[gi4], x4, y4, z4, w4);\n  } // Sum up and scale the result to cover the range [-1,1]\n\n  return 27.0 * (n0 + n1 + n2 + n3 + n4);\n};\n\nexport { SimplexNoise };","map":{"version":3,"names":["SimplexNoise","r","undefined","Math","grad3","grad4","p","i","floor","random","perm","simplex","prototype","dot","g","x","y","dot3","z","dot4","w","noise","xin","yin","n0","n1","n2","F2","sqrt","s","j","G2","t","X0","Y0","x0","y0","i1","j1","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","noise3d","zin","n3","F3","k","G3","Z0","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","F4","G4","n4","l","W0","w0","c1","c2","c3","c4","c5","c6","c","l1","l2","i3","j3","k3","l3","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4"],"sources":["C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/three/examples/jsm/math/SimplexNoise.js"],"sourcesContent":["// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function ( r ) {\n\n\tif ( r == undefined ) r = Math;\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\tthis.p = [];\n\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t}\n\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\n\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n};\n\nSimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n};\n\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n};\n\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n};\n\nSimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\n\t\ti1 = 1; j1 = 0;\n\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t}\telse {\n\n\t\ti1 = 0; j1 = 1;\n\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t}\n\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t}\n\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t}\n\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\n\t\tif ( y0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t// X Y Z order\n\n\t\t} else if ( x0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t// X Z Y order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t} // Z X Y order\n\n\t} else { // x0<y0\n\n\t\tif ( y0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Z Y X order\n\n\t\t} else if ( x0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Y Z X order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t} // Y X Z order\n\n\t}\n\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t}\n\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t}\n\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t}\n\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t}\n\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\n\t// The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\tvar i = Math.floor( x + s );\n\tvar j = Math.floor( y + s );\n\tvar k = Math.floor( z + s );\n\tvar l = Math.floor( w + s );\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t// To find out which of the 24 possible simplices we're in, we need to\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t// then find the correct traversal order for the simplex we’re in.\n\t// First, six pair-wise comparisons are performed between each possible pair\n\t// of the four coordinates, and the results are used to add up binary bits\n\t// for an integer index.\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t// Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t// Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t}\n\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t}\n\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t}\n\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t}\n\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif ( t4 < 0 ) n4 = 0.0;\n\telse {\n\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t}\n\n\t// Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n};\n\nexport { SimplexNoise };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}