{"ast":null,"code":"import _inherits from \"C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _classCallCheck from \"C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// Original src: https://github.com/zz85/threejs-path-flow\nvar BITS = 3;\nvar TEXTURE_WIDTH = 1024;\nvar TEXTURE_HEIGHT = 4;\nimport { DataTexture, RGBFormat, FloatType, RepeatWrapping, Mesh, InstancedMesh, NearestFilter, DynamicDrawUsage, Matrix4 } from '../../../build/three.module.js';\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\n\nexport function initSplineTexture() {\n  var numberOfCurves = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n  var dataArray = new Float32Array(TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * BITS);\n  var dataTexture = new DataTexture(dataArray, TEXTURE_WIDTH, TEXTURE_HEIGHT * numberOfCurves, RGBFormat, FloatType);\n  dataTexture.wrapS = RepeatWrapping;\n  dataTexture.wrapY = RepeatWrapping;\n  dataTexture.magFilter = NearestFilter;\n  dataTexture.needsUpdate = true;\n  return dataTexture;\n}\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\n\nexport function updateSplineTexture(texture, splineCurve) {\n  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var numberOfPoints = Math.floor(TEXTURE_WIDTH * (TEXTURE_HEIGHT / 4));\n  splineCurve.arcLengthDivisions = numberOfPoints / 2;\n  splineCurve.updateArcLengths();\n  var points = splineCurve.getSpacedPoints(numberOfPoints);\n  var frenetFrames = splineCurve.computeFrenetFrames(numberOfPoints, true);\n\n  for (var i = 0; i < numberOfPoints; i++) {\n    var rowOffset = Math.floor(i / TEXTURE_WIDTH);\n    var rowIndex = i % TEXTURE_WIDTH;\n    var pt = points[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.tangents[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.normals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + TEXTURE_HEIGHT * offset);\n    pt = frenetFrames.binormals[i];\n    setTextureValue(texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + TEXTURE_HEIGHT * offset);\n  }\n\n  texture.needsUpdate = true;\n}\n\nfunction setTextureValue(texture, index, x, y, z, o) {\n  var image = texture.image;\n  var data = image.data;\n  var i = BITS * TEXTURE_WIDTH * o; // Row Offset\n\n  data[index * BITS + i + 0] = x;\n  data[index * BITS + i + 1] = y;\n  data[index * BITS + i + 2] = z;\n}\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\n\n\nexport function getUniforms(splineTexture) {\n  var uniforms = {\n    spineTexture: {\n      value: splineTexture\n    },\n    pathOffset: {\n      type: 'f',\n      value: 0\n    },\n    // time of path curve\n    pathSegment: {\n      type: 'f',\n      value: 1\n    },\n    // fractional length of path\n    spineOffset: {\n      type: 'f',\n      value: 161\n    },\n    spineLength: {\n      type: 'f',\n      value: 400\n    },\n    flow: {\n      type: 'i',\n      value: 1\n    }\n  };\n  return uniforms;\n}\nexport function modifyShader(material, uniforms) {\n  var numberOfCurves = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  if (material.__ok) return;\n  material.__ok = true;\n\n  material.onBeforeCompile = function (shader) {\n    if (shader.__modified) return;\n    shader.__modified = true;\n    Object.assign(shader.uniforms, uniforms);\n    var vertexShader = \"\\n\\t\\tuniform sampler2D spineTexture;\\n\\t\\tuniform float pathOffset;\\n\\t\\tuniform float pathSegment;\\n\\t\\tuniform float spineOffset;\\n\\t\\tuniform float spineLength;\\n\\t\\tuniform int flow;\\n\\n\\t\\tfloat textureLayers = \".concat(TEXTURE_HEIGHT * numberOfCurves, \".;\\n\\t\\tfloat textureStacks = \").concat(TEXTURE_HEIGHT / 4, \".;\\n\\n\\t\\t\").concat(shader.vertexShader, \"\\n\\t\\t\") // chunk import moved in front of modified shader below\n    .replace('#include <beginnormal_vertex>', '') // vec3 transformedNormal declaration overriden below\n    .replace('#include <defaultnormal_vertex>', '') // vec3 transformed declaration overriden below\n    .replace('#include <begin_vertex>', '') // shader override\n    .replace(/void\\s*main\\s*\\(\\)\\s*\\{/, \"\\nvoid main() {\\n#include <beginnormal_vertex>\\n\\nvec4 worldPos = modelMatrix * vec4(position, 1.);\\n\\nbool bend = flow > 0;\\nfloat xWeight = bend ? 0. : 1.;\\n\\n#ifdef USE_INSTANCING\\nfloat pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\\nfloat spineLengthFromInstanceMatrix = instanceMatrix[3][0];\\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\\nfloat mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\\n#else\\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\\nfloat mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\\n#endif\\n\\nmt = mod(mt, textureStacks);\\nfloat rowOffset = floor(mt);\\n\\n#ifdef USE_INSTANCING\\nrowOffset += instanceMatrix[3][1] * \".concat(TEXTURE_HEIGHT, \".;\\n#endif\\n\\nvec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\\nvec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\\nvec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\\nvec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\\nmat3 basis = mat3(a, b, c);\\n\\nvec3 transformed = basis\\n\\t* vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\\n\\t+ spinePos;\\n\\nvec3 transformedNormal = normalMatrix * (basis * objectNormal);\\n\\t\\t\\t\")).replace('#include <project_vertex>', \"vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\\n\\t\\t\\t\\tgl_Position = projectionMatrix * mvPosition;\");\n    shader.vertexShader = vertexShader;\n  };\n}\n/**\n * A helper class for making meshes bend aroudn curves\n */\n\nexport var Flow = /*#__PURE__*/function () {\n  /**\n   * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n   * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n   */\n  function Flow(mesh) {\n    var numberOfCurves = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n    _classCallCheck(this, Flow);\n\n    var obj3D = mesh.clone();\n    var splineTexure = initSplineTexture(numberOfCurves);\n    var uniforms = getUniforms(splineTexure);\n    obj3D.traverse(function (child) {\n      if (child instanceof Mesh || child instanceof InstancedMesh) {\n        child.material = child.material.clone();\n        modifyShader(child.material, uniforms, numberOfCurves);\n      }\n    });\n    this.curveArray = new Array(numberOfCurves);\n    this.curveLengthArray = new Array(numberOfCurves);\n    this.object3D = obj3D;\n    this.splineTexure = splineTexure;\n    this.uniforms = uniforms;\n  }\n\n  _createClass(Flow, [{\n    key: \"updateCurve\",\n    value: function updateCurve(index, curve) {\n      if (index >= this.curveArray.length) throw Error('Index out of range for Flow');\n      var curveLength = curve.getLength();\n      this.uniforms.spineLength.value = curveLength;\n      this.curveLengthArray[index] = curveLength;\n      this.curveArray[index] = curve;\n      updateSplineTexture(this.splineTexure, curve, index);\n    }\n  }, {\n    key: \"moveAlongCurve\",\n    value: function moveAlongCurve(amount) {\n      this.uniforms.pathOffset.value += amount;\n    }\n  }]);\n\n  return Flow;\n}();\nvar matrix = new Matrix4();\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\n\nexport var InstancedFlow = /*#__PURE__*/function (_Flow) {\n  _inherits(InstancedFlow, _Flow);\n\n  var _super = _createSuper(InstancedFlow);\n\n  /**\n   *\n   * @param {number} count The number of instanced elements\n   * @param {number} curveCount The number of curves to preallocate for\n   * @param {Geometry} geometry The geometry to use for the instanced mesh\n   * @param {Material} material The material to use for the instanced mesh\n   */\n  function InstancedFlow(count, curveCount, geometry, material) {\n    var _this;\n\n    _classCallCheck(this, InstancedFlow);\n\n    var mesh = new InstancedMesh(geometry, material, count);\n    mesh.instanceMatrix.setUsage(DynamicDrawUsage);\n    _this = _super.call(this, mesh, curveCount);\n    _this.offsets = new Array(count).fill(0);\n    _this.whichCurve = new Array(count).fill(0);\n    return _this;\n  }\n  /**\n   * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n   * This writes that information to the matrix and marks it as needing update.\n   *\n   * @param {number} index of the instanced element to update\n   */\n\n\n  _createClass(InstancedFlow, [{\n    key: \"writeChanges\",\n    value: function writeChanges(index) {\n      matrix.makeTranslation(this.curveLengthArray[this.whichCurve[index]], this.whichCurve[index], this.offsets[index]);\n      this.object3D.setMatrixAt(index, matrix);\n      this.object3D.instanceMatrix.needsUpdate = true;\n    }\n    /**\n     * Move an individual element along the curve by a specific amount\n     *\n     * @param {number} index Which element to update\n     * @param {number} offset Move by how much\n     */\n\n  }, {\n    key: \"moveIndividualAlongCurve\",\n    value: function moveIndividualAlongCurve(index, offset) {\n      this.offsets[index] += offset;\n      this.writeChanges(index);\n    }\n    /**\n     * Select which curve to use for an element\n     *\n     * @param {number} index the index of the instanced element to update\n     * @param {number} curveNo the index of the curve it should use\n     */\n\n  }, {\n    key: \"setCurve\",\n    value: function setCurve(index, curveNo) {\n      if (isNaN(curveNo)) throw Error('curve index being set is Not a Number (NaN)');\n      this.whichCurve[index] = curveNo;\n      this.writeChanges(index);\n    }\n  }]);\n\n  return InstancedFlow;\n}(Flow);","map":{"version":3,"names":["BITS","TEXTURE_WIDTH","TEXTURE_HEIGHT","DataTexture","RGBFormat","FloatType","RepeatWrapping","Mesh","InstancedMesh","NearestFilter","DynamicDrawUsage","Matrix4","initSplineTexture","numberOfCurves","dataArray","Float32Array","dataTexture","wrapS","wrapY","magFilter","needsUpdate","updateSplineTexture","texture","splineCurve","offset","numberOfPoints","Math","floor","arcLengthDivisions","updateArcLengths","points","getSpacedPoints","frenetFrames","computeFrenetFrames","i","rowOffset","rowIndex","pt","setTextureValue","x","y","z","tangents","normals","binormals","index","o","image","data","getUniforms","splineTexture","uniforms","spineTexture","value","pathOffset","type","pathSegment","spineOffset","spineLength","flow","modifyShader","material","__ok","onBeforeCompile","shader","__modified","Object","assign","vertexShader","replace","Flow","mesh","obj3D","clone","splineTexure","traverse","child","curveArray","Array","curveLengthArray","object3D","curve","length","Error","curveLength","getLength","amount","matrix","InstancedFlow","count","curveCount","geometry","instanceMatrix","setUsage","offsets","fill","whichCurve","makeTranslation","setMatrixAt","writeChanges","curveNo","isNaN"],"sources":["C:/Users/User/OneDrive/Desktop/lwmpi_new/node_modules/three/examples/jsm/modifiers/CurveModifier.js"],"sourcesContent":["// Original src: https://github.com/zz85/threejs-path-flow\nconst BITS = 3;\nconst TEXTURE_WIDTH = 1024;\nconst TEXTURE_HEIGHT = 4;\n\nimport {\n\tDataTexture,\n\tRGBFormat,\n\tFloatType,\n\tRepeatWrapping,\n\tMesh,\n\tInstancedMesh,\n\tNearestFilter,\n\tDynamicDrawUsage,\n\tMatrix4\n} from '../../../build/three.module.js';\n\n/**\n * Make a new DataTexture to store the descriptions of the curves.\n *\n * @param { number } numberOfCurves the number of curves needed to be described by this texture.\n */\nexport function initSplineTexture( numberOfCurves = 1 ) {\n\n\tconst dataArray = new Float32Array( TEXTURE_WIDTH * TEXTURE_HEIGHT * numberOfCurves * BITS );\n\tconst dataTexture = new DataTexture(\n\t\tdataArray,\n\t\tTEXTURE_WIDTH,\n\t\tTEXTURE_HEIGHT * numberOfCurves,\n\t\tRGBFormat,\n\t\tFloatType\n\t);\n\n\tdataTexture.wrapS = RepeatWrapping;\n\tdataTexture.wrapY = RepeatWrapping;\n\tdataTexture.magFilter = NearestFilter;\n\tdataTexture.needsUpdate = true;\n\n\treturn dataTexture;\n\n}\n\n/**\n * Write the curve description to the data texture\n *\n * @param { DataTexture } texture The DataTexture to write to\n * @param { Curve } splineCurve The curve to describe\n * @param { number } offset Which curve slot to write to\n */\nexport function updateSplineTexture( texture, splineCurve, offset = 0 ) {\n\n\tconst numberOfPoints = Math.floor( TEXTURE_WIDTH * ( TEXTURE_HEIGHT / 4 ) );\n\tsplineCurve.arcLengthDivisions = numberOfPoints / 2;\n\tsplineCurve.updateArcLengths();\n\tconst points = splineCurve.getSpacedPoints( numberOfPoints );\n\tconst frenetFrames = splineCurve.computeFrenetFrames( numberOfPoints, true );\n\n\tfor ( let i = 0; i < numberOfPoints; i ++ ) {\n\n\t\tconst rowOffset = Math.floor( i / TEXTURE_WIDTH );\n\t\tconst rowIndex = i % TEXTURE_WIDTH;\n\n\t\tlet pt = points[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 0 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.tangents[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 1 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.normals[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 2 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\t\tpt = frenetFrames.binormals[ i ];\n\t\tsetTextureValue( texture, rowIndex, pt.x, pt.y, pt.z, 3 + rowOffset + ( TEXTURE_HEIGHT * offset ) );\n\n\t}\n\n\ttexture.needsUpdate = true;\n\n}\n\n\nfunction setTextureValue( texture, index, x, y, z, o ) {\n\n\tconst image = texture.image;\n\tconst { data } = image;\n\tconst i = BITS * TEXTURE_WIDTH * o; // Row Offset\n\tdata[ index * BITS + i + 0 ] = x;\n\tdata[ index * BITS + i + 1 ] = y;\n\tdata[ index * BITS + i + 2 ] = z;\n\n}\n\n/**\n * Create a new set of uniforms for describing the curve modifier\n *\n * @param { DataTexture } Texture which holds the curve description\n */\nexport function getUniforms( splineTexture ) {\n\n\tconst uniforms = {\n\t\tspineTexture: { value: splineTexture },\n\t\tpathOffset: { type: 'f', value: 0 }, // time of path curve\n\t\tpathSegment: { type: 'f', value: 1 }, // fractional length of path\n\t\tspineOffset: { type: 'f', value: 161 },\n\t\tspineLength: { type: 'f', value: 400 },\n\t\tflow: { type: 'i', value: 1 },\n\t};\n\treturn uniforms;\n\n}\n\nexport function modifyShader( material, uniforms, numberOfCurves = 1 ) {\n\n\tif ( material.__ok ) return;\n\tmaterial.__ok = true;\n\n\tmaterial.onBeforeCompile = ( shader ) => {\n\n\t\tif ( shader.__modified ) return;\n\t\tshader.__modified = true;\n\n\t\tObject.assign( shader.uniforms, uniforms );\n\n\t\tconst vertexShader = `\n\t\tuniform sampler2D spineTexture;\n\t\tuniform float pathOffset;\n\t\tuniform float pathSegment;\n\t\tuniform float spineOffset;\n\t\tuniform float spineLength;\n\t\tuniform int flow;\n\n\t\tfloat textureLayers = ${TEXTURE_HEIGHT * numberOfCurves}.;\n\t\tfloat textureStacks = ${TEXTURE_HEIGHT / 4}.;\n\n\t\t${shader.vertexShader}\n\t\t`\n\t\t// chunk import moved in front of modified shader below\n\t\t\t.replace( '#include <beginnormal_vertex>', '' )\n\n\t\t\t// vec3 transformedNormal declaration overriden below\n\t\t\t.replace( '#include <defaultnormal_vertex>', '' )\n\n\t\t\t// vec3 transformed declaration overriden below\n\t\t\t.replace( '#include <begin_vertex>', '' )\n\n\t\t\t// shader override\n\t\t\t.replace(\n\t\t\t\t/void\\s*main\\s*\\(\\)\\s*\\{/,\n\t\t\t\t`\nvoid main() {\n#include <beginnormal_vertex>\n\nvec4 worldPos = modelMatrix * vec4(position, 1.);\n\nbool bend = flow > 0;\nfloat xWeight = bend ? 0. : 1.;\n\n#ifdef USE_INSTANCING\nfloat pathOffsetFromInstanceMatrix = instanceMatrix[3][2];\nfloat spineLengthFromInstanceMatrix = instanceMatrix[3][0];\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLengthFromInstanceMatrix : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset + pathOffsetFromInstanceMatrix)*textureStacks;\n#else\nfloat spinePortion = bend ? (worldPos.x + spineOffset) / spineLength : 0.;\nfloat mt = (spinePortion * pathSegment + pathOffset)*textureStacks;\n#endif\n\nmt = mod(mt, textureStacks);\nfloat rowOffset = floor(mt);\n\n#ifdef USE_INSTANCING\nrowOffset += instanceMatrix[3][1] * ${TEXTURE_HEIGHT}.;\n#endif\n\nvec3 spinePos = texture2D(spineTexture, vec2(mt, (0. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 a =        texture2D(spineTexture, vec2(mt, (1. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 b =        texture2D(spineTexture, vec2(mt, (2. + rowOffset + 0.5) / textureLayers)).xyz;\nvec3 c =        texture2D(spineTexture, vec2(mt, (3. + rowOffset + 0.5) / textureLayers)).xyz;\nmat3 basis = mat3(a, b, c);\n\nvec3 transformed = basis\n\t* vec3(worldPos.x * xWeight, worldPos.y * 1., worldPos.z * 1.)\n\t+ spinePos;\n\nvec3 transformedNormal = normalMatrix * (basis * objectNormal);\n\t\t\t` ).replace(\n\t\t\t\t'#include <project_vertex>',\n\t\t\t\t`vec4 mvPosition = modelViewMatrix * vec4( transformed, 1.0 );\n\t\t\t\tgl_Position = projectionMatrix * mvPosition;`\n\t\t\t);\n\n\t\tshader.vertexShader = vertexShader;\n\n\t};\n\n}\n\n/**\n * A helper class for making meshes bend aroudn curves\n */\nexport class Flow {\n\n\t/**\n\t * @param {Mesh} mesh The mesh to clone and modify to bend around the curve\n\t * @param {number} numberOfCurves The amount of space that should preallocated for additional curves\n\t */\n\tconstructor( mesh, numberOfCurves = 1 ) {\n\n\t\tconst obj3D = mesh.clone();\n\t\tconst splineTexure = initSplineTexture( numberOfCurves );\n\t\tconst uniforms = getUniforms( splineTexure );\n\t\tobj3D.traverse( function ( child ) {\n\n\t\t\tif (\n\t\t\t\tchild instanceof Mesh ||\n\t\t\t\tchild instanceof InstancedMesh\n\t\t\t) {\n\n\t\t\t\tchild.material = child.material.clone();\n\t\t\t\tmodifyShader( child.material, uniforms, numberOfCurves );\n\n\t\t\t}\n\n\t\t} );\n\n\t\tthis.curveArray = new Array( numberOfCurves );\n\t\tthis.curveLengthArray = new Array( numberOfCurves );\n\n\t\tthis.object3D = obj3D;\n\t\tthis.splineTexure = splineTexure;\n\t\tthis.uniforms = uniforms;\n\n\t}\n\n\tupdateCurve( index, curve ) {\n\n\t\tif ( index >= this.curveArray.length ) throw Error( 'Index out of range for Flow' );\n\t\tconst curveLength = curve.getLength();\n\t\tthis.uniforms.spineLength.value = curveLength;\n\t\tthis.curveLengthArray[ index ] = curveLength;\n\t\tthis.curveArray[ index ] = curve;\n\t\tupdateSplineTexture( this.splineTexure, curve, index );\n\n\t}\n\n\tmoveAlongCurve( amount ) {\n\n\t\tthis.uniforms.pathOffset.value += amount;\n\n\t}\n\n}\nconst matrix = new Matrix4();\n\n/**\n * A helper class for creating instanced versions of flow, where the instances are placed on the curve.\n */\nexport class InstancedFlow extends Flow {\n\n\t/**\n\t *\n\t * @param {number} count The number of instanced elements\n\t * @param {number} curveCount The number of curves to preallocate for\n\t * @param {Geometry} geometry The geometry to use for the instanced mesh\n\t * @param {Material} material The material to use for the instanced mesh\n\t */\n\tconstructor( count, curveCount, geometry, material ) {\n\n\t\tconst mesh = new InstancedMesh(\n\t\t\tgeometry,\n\t\t\tmaterial,\n\t\t\tcount\n\t\t);\n\t\tmesh.instanceMatrix.setUsage( DynamicDrawUsage );\n\t\tsuper( mesh, curveCount );\n\n\t\tthis.offsets = new Array( count ).fill( 0 );\n\t\tthis.whichCurve = new Array( count ).fill( 0 );\n\n\t}\n\n\t/**\n\t * The extra information about which curve and curve position is stored in the translation components of the matrix for the instanced objects\n\t * This writes that information to the matrix and marks it as needing update.\n\t *\n\t * @param {number} index of the instanced element to update\n\t */\n\twriteChanges( index ) {\n\n\t\tmatrix.makeTranslation(\n\t\t\tthis.curveLengthArray[ this.whichCurve[ index ] ],\n\t\t\tthis.whichCurve[ index ],\n\t\t\tthis.offsets[ index ]\n\t\t);\n\t\tthis.object3D.setMatrixAt( index, matrix );\n\t\tthis.object3D.instanceMatrix.needsUpdate = true;\n\n\t}\n\n\t/**\n\t * Move an individual element along the curve by a specific amount\n\t *\n\t * @param {number} index Which element to update\n\t * @param {number} offset Move by how much\n\t */\n\tmoveIndividualAlongCurve( index, offset ) {\n\n\t\tthis.offsets[ index ] += offset;\n\t\tthis.writeChanges( index );\n\n\t}\n\n\t/**\n\t * Select which curve to use for an element\n\t *\n\t * @param {number} index the index of the instanced element to update\n\t * @param {number} curveNo the index of the curve it should use\n\t */\n\tsetCurve( index, curveNo ) {\n\n\t\tif ( isNaN( curveNo ) ) throw Error( 'curve index being set is Not a Number (NaN)' );\n\t\tthis.whichCurve[ index ] = curveNo;\n\t\tthis.writeChanges( index );\n\n\t}\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}